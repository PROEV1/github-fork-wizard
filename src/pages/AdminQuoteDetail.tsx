import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { QuoteDetailView } from '@/components/QuoteDetailView';
import { BrandPage, BrandContainer, BrandLoading } from '@/components/brand';
import { useToast } from '@/hooks/use-toast';
import { Button } from '@/components/ui/button';
import { ArrowLeft } from 'lucide-react';

interface Quote {
  id: string;
  quote_number: string;
  total_cost: number;
  materials_cost: number;
  install_cost: number;
  extras_cost: number;
  status: string;
  created_at: string;
  expires_at: string | null;
  product_details: string;
  room_info: string | null;
  range: string | null;
  finish: string | null;
  special_instructions: string | null;
  warranty_period: string | null;
  includes_installation: boolean;
  deposit_required: number;
  notes: string | null;
  is_shareable: boolean;
  share_token: string | null;
  client: {
    id: string;
    full_name: string;
    email: string;
    phone: string | null;
    address: string | null;
  };
}

export default function AdminQuoteDetail() {
  const { quoteId } = useParams<{ quoteId: string }>();
  const navigate = useNavigate();
  const [quote, setQuote] = useState<Quote | null>(null);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  useEffect(() => {
    if (!quoteId) {
      navigate('/admin/quotes');
      return;
    }
    fetchQuote();
  }, [quoteId]);

  const fetchQuote = async () => {
    try {
      const { data, error } = await supabase
        .from('quotes')
        .select(`
          *,
          client:clients(
            id,
            full_name,
            email,
            phone,
            address
          )
        `)
        .eq('id', quoteId)
        .single();

      if (error) throw error;
      setQuote(data);
    } catch (error) {
      console.error('Error fetching quote:', error);
      toast({
        title: "Error",
        description: "Failed to load quote details",
        variant: "destructive",
      });
      navigate('/admin/quotes');
    } finally {
      setLoading(false);
    }
  };

  const handleBack = () => {
    navigate('/admin/quotes');
  };

  const handleRejectQuote = async (quoteId: string) => {
    try {
      // Update quote status to rejected
      const { error: updateError } = await supabase
        .from('quotes')
        .update({ 
          status: 'rejected'
        })
        .eq('id', quoteId);

      if (updateError) throw updateError;

      // Check if there's an associated order and delete it
      const { data: orderData } = await supabase
        .from('orders')
        .select('id')
        .eq('quote_id', quoteId)
        .single();

      if (orderData) {
        const { error: deleteError } = await supabase
          .from('orders')
          .delete()
          .eq('quote_id', quoteId);

        if (deleteError) throw deleteError;
      }

      toast({
        title: "Quote Rejected",
        description: "Quote has been rejected successfully",
      });

      // Refresh quote data
      fetchQuote();

    } catch (error) {
      console.error('Error rejecting quote:', error);
      toast({
        title: "Error",
        description: "Failed to reject quote",
        variant: "destructive",
      });
    }
  };

  const handleAcceptQuote = async (quoteId: string) => {
    try {
      // Update quote status to accepted
      const { error: updateError } = await supabase
        .from('quotes')
        .update({ 
          status: 'accepted',
          accepted_at: new Date().toISOString()
        })
        .eq('id', quoteId);

      if (updateError) throw updateError;

      // Fetch the quote with client details for order creation
      const { data: quoteData, error: fetchError } = await supabase
        .from('quotes')
        .select(`
          *,
          client:clients(*)
        `)
        .eq('id', quoteId)
        .single();

      if (fetchError) throw fetchError;

      // Create order from accepted quote
      const { data: order, error: orderError } = await supabase
        .from('orders')
        .insert({
          order_number: '', // Will be auto-generated by trigger
          client_id: quoteData.client_id,
          quote_id: quoteData.id,
          total_amount: quoteData.total_cost,
          deposit_amount: quoteData.deposit_required || (quoteData.total_cost * 0.25),
          job_address: quoteData.client.address || null
        })
        .select()
        .single();

      if (orderError) throw orderError;

      toast({
        title: "Quote Accepted!",
        description: "Order has been created successfully. Redirecting...",
      });

      // Redirect to order details page
      setTimeout(() => {
        navigate(`/admin/order/${order.id}`);
      }, 1500);

    } catch (error) {
      console.error('Error accepting quote:', error);
      toast({
        title: "Error",
        description: "Failed to accept quote",
        variant: "destructive",
      });
    }
  };

  if (loading) {
    return <BrandLoading />;
  }

  if (!quote) {
    return (
      <BrandPage>
        <BrandContainer>
          <div className="text-center py-12">
            <h2 className="text-xl font-semibold mb-4">Quote not found</h2>
            <Button onClick={handleBack} variant="outline">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Quotes
            </Button>
          </div>
        </BrandContainer>
      </BrandPage>
    );
  }

  return (
    <BrandPage>
      <BrandContainer>
        <QuoteDetailView 
          quote={quote} 
          onBack={handleBack}
          onAccept={handleAcceptQuote}
          onReject={handleRejectQuote}
        />
      </BrandContainer>
    </BrandPage>
  );
}